[{"/Users/gabriel/Coding/OP/JS/CV-maker/src/index.js":"1","/Users/gabriel/Coding/OP/JS/CV-maker/src/App.js":"2","/Users/gabriel/Coding/OP/JS/CV-maker/src/reportWebVitals.js":"3","/Users/gabriel/Coding/OP/JS/CV-maker/src/CVForm.jsx":"4","/Users/gabriel/Coding/OP/JS/CV-maker/src/GeneralInfoForm.js":"5","/Users/gabriel/Coding/OP/JS/CV-maker/src/EducationPreview.js":"6","/Users/gabriel/Coding/OP/JS/CV-maker/src/GeneralPreview.js":"7","/Users/gabriel/Coding/OP/JS/CV-maker/src/EducationForm.js":"8","/Users/gabriel/Coding/OP/JS/CV-maker/src/WorkForm.js":"9","/Users/gabriel/Coding/OP/JS/CV-maker/src/WorkFormInput.js":"10","/Users/gabriel/Coding/OP/JS/CV-maker/src/WorkPreview.js":"11","/Users/gabriel/Coding/OP/JS/CV-maker/src/ActionCreators.js":"12","/Users/gabriel/Coding/OP/JS/CV-maker/src/RootReducer.js":"13"},{"size":657,"mtime":1616198830136,"results":"14","hashOfConfig":"15"},{"size":163,"mtime":1616187922978,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1615943743269,"results":"17","hashOfConfig":"15"},{"size":3792,"mtime":1616296839189,"results":"18","hashOfConfig":"15"},{"size":1101,"mtime":1616293058877,"results":"19","hashOfConfig":"15"},{"size":405,"mtime":1615946621139,"results":"20","hashOfConfig":"15"},{"size":297,"mtime":1615943743268,"results":"21","hashOfConfig":"15"},{"size":1414,"mtime":1615946422078,"results":"22","hashOfConfig":"15"},{"size":2545,"mtime":1616033082872,"results":"23","hashOfConfig":"15"},{"size":1161,"mtime":1616032921657,"results":"24","hashOfConfig":"15"},{"size":450,"mtime":1616194972693,"results":"25","hashOfConfig":"15"},{"size":455,"mtime":1616195011773,"results":"26","hashOfConfig":"15"},{"size":1492,"mtime":1616296850351,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1sxx049",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/gabriel/Coding/OP/JS/CV-maker/src/index.js",[],["57","58"],"/Users/gabriel/Coding/OP/JS/CV-maker/src/App.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/reportWebVitals.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/CVForm.jsx",["59","60","61","62"],"import {React, Component} from \"react\";\r\nimport GeneralInfoForm from \"./GeneralInfoForm\";\r\nimport GeneralPreview from \"./GeneralPreview\";\r\nimport EducationForm from \"./EducationForm\";\r\nimport EducationPreview from \"./EducationPreview\";\r\nimport WorkForm from \"./WorkForm\";\r\nimport WorkPreview from \"./WorkPreview\";\r\nimport {connect} from \"react-redux\";\r\nimport {addToCV, editCV, updateCV } from \"./ActionCreators\";\r\n\r\nclass CVForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        // this.state={\r\n        //     generalInfo: {},\r\n        //     educationXP: {},\r\n        //     workXP: [],\r\n        //     generalInfoState: false,\r\n        //     educationXPState: false,\r\n        //     workXPState: false\r\n        // }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    \r\n    handleSubmit(e, data){\r\n        e.preventDefault();\r\n        this.props.dispatch(addToCV(data, e.target.id));\r\n    }\r\n\r\n    handleClick(e){\r\n        console.log(\"yo\");\r\n        this.props.dispatch(editCV(e.target.id));\r\n    }\r\n    \r\n    handleChange(e, element){\r\n     this.props.dispatch(updateCV(element, e.target.name, e.target.value));\r\n    }\r\n\r\n    render(){\r\n        return (<main><section className={this.props.generalInfoState ? \"preview-container\" : \"form-container\"}>\r\n        {this.props.generalInfoState ? <button id=\"generalInfoState\" className=\"edit\" onClick={this.handleClick} >Edit</button> : null }\r\n        {    this.props.generalInfoState ? <GeneralPreview generalInfo={this.props.generalInfo} /> :\r\n            < GeneralInfoForm formData={this.props.generalInfo} onChange={this.handleChange} generalInfo={this.props.generalInfo} handleSubmit={this.handleSubmit}/>  }\r\n        </section>\r\n        {/*<section>\r\n            {this.props.educationXPState ? <button id=\"educationXPState\" onClick={this.handleClick} >Edit</button> : null}\r\n            {this.props.educationXPState ? <EducationPreview educationXP={this.props.educationXP} />:\r\n                < EducationForm formData={this.props.educationXP} onChange={this.handleChange} educationXP={this.props.educationXP}  handleSubmit={this.handleSubmit} /> }\r\n        </section>\r\n        <section>\r\n            {this.props.workXPState ? <button id=\"workXPState\" onClick={this.handleClick} >Edit</button> : null}\r\n            {this.props.workXPState ? <WorkPreview workXP={this.props.workXP} />:\r\n            <WorkForm handleSubmit={this.handleSubmit} />}\r\n        </section>*/}\r\n        </main>);\r\n    }\r\n}\r\n//const mapDispatchToProps = {addToCV, editCV, updateCV };\r\n\r\nfunction mapStateToProps(reduxState){\r\n    return {\r\n            generalInfo: reduxState.generalInfo,\r\n            educationXP: reduxState.educationXP,\r\n            workXP: reduxState.workXP,\r\n            generalInfoState: reduxState.generalInfoState,\r\n            educationXPState: reduxState.educationXPState,\r\n            workXPState: reduxState.workXPState\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(CVForm);\r\n//flows from rootReducer to MapStateToProps\r\n//then to each component\r\n//upon inputs, actionCreators are dispatched\r\n//these change the state in rootReducer\r\n\r\n//these can each be stateless functional components, pass down a submit function to save their data into state upon \"Add\"\r\n//general info form (name, email, phone)\r\n//save in state as generalInfo: {name, email, phone}\r\n//educational xp form(school, major, dates)\r\n//save in state as educationalXP={school, major, dates: {start, end}}\r\n//work xp form (company name, position, dates)\r\n//save in state as workXP = [{company, position, dates: {start, end}}]\r\n\r\n//hitting mainForm submit button \r\n//needs edit and submit button","/Users/gabriel/Coding/OP/JS/CV-maker/src/GeneralInfoForm.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/EducationPreview.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/GeneralPreview.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/EducationForm.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/WorkForm.js",["63"],"import React, {useEffect, useState} from \"react\";\nimport WorkFormInput from \"./WorkFormInput\";\n//work xp form (company name, position, dates)\n//save in state as workXP = [{company, position, dateStart, dateEnd}]\n\nconst WorkForm = (props)=>{\n    const [workHistory, setWorkHistory]=useState([]);\n\n    const workHistoryInputs = workHistory.map((work, index)=>{\n        return < WorkFormInput onChange={(e)=>{\n            let id = e.target.id.split(\"-\")[1];\n            let newWorkHistory = workHistory.map((work, index)=>{\n                if (id===index){\n                   return Object.assign({}, work, {[e.target.name]: [e.target.value]});\n                }\n                return work;\n            });\n            setWorkHistory(newWorkHistory);\n        }} \n         val={workHistory} key={index} id={index} />;\n    });\n    return (<form id=\"workXP\" onSubmit={(e: React.FormEvent)=>{\n        e.preventDefault();\n        let totalFormData=[];\n        for (let i=0;i<workHistory.length;i++){\n          \n            let data = new FormData(e.target);   \n            // console.log(data.get(`company-${i}`));\n            // console.log(data.get(`position-${i}`));\n            let formData = {company: data.get(`company-${i}`), position: data.get(`position-${i}`), dateStart: data.get(`date-start-${i}`), dateEnd: data.get(`date-end-${i}`)}\n            totalFormData.push(formData);\n        }\n\n        props.handleSubmit(e, totalFormData)\n    }} >\n            {workHistoryInputs}\n      {  //for adding multiple companies, you can use functionalState to add another chunk of input into state\n              //include an add button that adds another object into local state, \n\n        //then create a workHistoryInputs array by mapping over state, and for each \"chunk\" return <WorkFormInput /> with proper indexing as props \n        //set this as the input ie <form>{workHistoryInputs}</form>\n\n        //onChange will affect local state, and value will be based on it\n        //submit should submit the state of this form\n        //iterate over the different inputs and change id as index\n\n        //BASICALLY majority of state is handled within this app, only the submit coming from CVForm, consider making this component stateful if needed\n\n      }\n        <input type=\"submit\" value=\"Submit\" />\n        <button onClick={(e)=>{\n            e.preventDefault();\n            let newWorkHistory = [...workHistory,\n                {}];\n            setWorkHistory(newWorkHistory);\n        }}>Add Company</button>\n    </form>)\n\n}\n\nexport default WorkForm;","/Users/gabriel/Coding/OP/JS/CV-maker/src/WorkFormInput.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/WorkPreview.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/ActionCreators.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/RootReducer.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":4,"column":8,"nodeType":"70","messageId":"71","endLine":4,"endColumn":21},{"ruleId":"68","severity":1,"message":"72","line":5,"column":8,"nodeType":"70","messageId":"71","endLine":5,"endColumn":24},{"ruleId":"68","severity":1,"message":"73","line":6,"column":8,"nodeType":"70","messageId":"71","endLine":6,"endColumn":16},{"ruleId":"68","severity":1,"message":"74","line":7,"column":8,"nodeType":"70","messageId":"71","endLine":7,"endColumn":19},{"ruleId":"68","severity":1,"message":"75","line":1,"column":16,"nodeType":"70","messageId":"71","endLine":1,"endColumn":25},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'EducationForm' is defined but never used.","Identifier","unusedVar","'EducationPreview' is defined but never used.","'WorkForm' is defined but never used.","'WorkPreview' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]