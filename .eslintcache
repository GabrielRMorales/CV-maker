[{"/Users/gabriel/Coding/OP/JS/CV-maker/src/index.js":"1","/Users/gabriel/Coding/OP/JS/CV-maker/src/App.js":"2","/Users/gabriel/Coding/OP/JS/CV-maker/src/reportWebVitals.js":"3","/Users/gabriel/Coding/OP/JS/CV-maker/src/CVForm.jsx":"4","/Users/gabriel/Coding/OP/JS/CV-maker/src/GeneralInfoForm.js":"5","/Users/gabriel/Coding/OP/JS/CV-maker/src/EducationPreview.js":"6","/Users/gabriel/Coding/OP/JS/CV-maker/src/GeneralPreview.js":"7","/Users/gabriel/Coding/OP/JS/CV-maker/src/EducationForm.js":"8","/Users/gabriel/Coding/OP/JS/CV-maker/src/WorkForm.js":"9","/Users/gabriel/Coding/OP/JS/CV-maker/src/WorkFormInput.js":"10","/Users/gabriel/Coding/OP/JS/CV-maker/src/WorkPreview.js":"11","/Users/gabriel/Coding/OP/JS/CV-maker/src/ActionCreators.js":"12","/Users/gabriel/Coding/OP/JS/CV-maker/src/RootReducer.js":"13"},{"size":657,"mtime":1616616951795,"results":"14","hashOfConfig":"15"},{"size":163,"mtime":1616616951787,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1615943743269,"results":"17","hashOfConfig":"15"},{"size":4454,"mtime":1616617323834,"results":"18","hashOfConfig":"15"},{"size":1101,"mtime":1616293058877,"results":"19","hashOfConfig":"15"},{"size":405,"mtime":1615946621139,"results":"20","hashOfConfig":"15"},{"size":297,"mtime":1615943743268,"results":"21","hashOfConfig":"15"},{"size":1414,"mtime":1615946422078,"results":"22","hashOfConfig":"15"},{"size":2537,"mtime":1616616951793,"results":"23","hashOfConfig":"15"},{"size":1161,"mtime":1616032921657,"results":"24","hashOfConfig":"15"},{"size":450,"mtime":1616616951794,"results":"25","hashOfConfig":"15"},{"size":455,"mtime":1616616951780,"results":"26","hashOfConfig":"15"},{"size":1492,"mtime":1616616951791,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1sxx049",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/gabriel/Coding/OP/JS/CV-maker/src/index.js",[],["56","57"],"/Users/gabriel/Coding/OP/JS/CV-maker/src/App.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/reportWebVitals.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/CVForm.jsx",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/GeneralInfoForm.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/EducationPreview.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/GeneralPreview.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/EducationForm.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/WorkForm.js",["58"],"import React, {useEffect, useState} from \"react\";\nimport WorkFormInput from \"./WorkFormInput\";\n//work xp form (company name, position, dates)\n//save in state as workXP = [{company, position, dateStart, dateEnd}]\n\nconst WorkForm = (props)=>{\n    const [workHistory, setWorkHistory]=useState([{}]);\n\n    const workHistoryInputs = workHistory.map((work, index)=>{\n        return < WorkFormInput onChange={(e)=>{\n            let id = e.target.id.split(\"-\")[1];\n            let newWorkHistory = workHistory.map((work, index)=>{\n                if (id===index){\n                   return Object.assign({}, work, {[e.target.name]: [e.target.value]});\n                }\n                return work;\n            });\n            setWorkHistory(newWorkHistory);\n        }} val={workHistory} key={index} id={index} />;\n    });\n    return (<form id=\"workXP\" onSubmit={(e: React.FormEvent)=>{\n        e.preventDefault();\n        let totalFormData=[];\n        for (let i=0;i<workHistory.length;i++){\n          \n            let data = new FormData(e.target);   \n            // console.log(data.get(`company-${i}`));\n            // console.log(data.get(`position-${i}`));\n            let formData = {company: data.get(`company-${i}`), position: data.get(`position-${i}`), dateStart: data.get(`date-start-${i}`), dateEnd: data.get(`date-end-${i}`)}\n            totalFormData.push(formData);\n        }\n\n        props.handleSubmit(e, totalFormData)\n    }} >\n            {workHistoryInputs}\n      {  //for adding multiple companies, you can use functionalState to add another chunk of input into state\n              //include an add button that adds another object into local state, \n\n        //then create a workHistoryInputs array by mapping over state, and for each \"chunk\" return <WorkFormInput /> with proper indexing as props \n        //set this as the input ie <form>{workHistoryInputs}</form>\n\n        //onChange will affect local state, and value will be based on it\n        //submit should submit the state of this form\n        //iterate over the different inputs and change id as index\n\n        //BASICALLY majority of state is handled within this app, only the submit coming from CVForm, consider making this component stateful if needed\n\n      }\n        <input type=\"submit\" value=\"Submit\" />\n        <button onClick={(e)=>{\n            e.preventDefault();\n            let newWorkHistory = [...workHistory,\n                {}];\n            setWorkHistory(newWorkHistory);\n        }}>Add Company</button>\n    </form>)\n\n}\n\nexport default WorkForm;","/Users/gabriel/Coding/OP/JS/CV-maker/src/WorkFormInput.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/WorkPreview.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/ActionCreators.js",[],"/Users/gabriel/Coding/OP/JS/CV-maker/src/RootReducer.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":1,"column":16,"nodeType":"65","messageId":"66","endLine":1,"endColumn":25},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]